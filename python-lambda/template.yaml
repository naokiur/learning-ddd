AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS

  Sample SAM Template for AWS

Globals:
  Function:
    Timeout: 3

Resources:
  CalculateLambdaPythonFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CalculateLambdaPythonFunction
      CodeUri: handlers/
      Handler: calculate.app.lambda_handler
      Runtime: python3.6
  DynamodbLambdaPythonRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DynamodbLambdaPythonRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -   Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      Policies:
        -   PolicyName: DynamodbLambdaPythonRolePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -   Effect: Allow
                    Action:
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                      - dynamodb:*Item
                      - dynamodb:Scan
                      - dynamodb:Query
                      - dynamodb:List*
                      - logs:PutLogEvents
  DynamodbLambdaPythonFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DynamodbLambdaPythonFunction
      CodeUri: handlers/
      Handler: dynamodb.app.lambda_handler
      Runtime: python3.6
  S3LambdaPythonRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: S3LambdaPythonRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -   Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      Policies:
        - PolicyName: S3LambdaPythonRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -   Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - s3:List*
                    - s3:Get*
                  Resource: '*'

  S3LambdaPythonFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: S3LambdaPythonFunction
      CodeUri: handlers/
      Handler: s3.app.lambda_handler
      Runtime: python3.6
      Role: